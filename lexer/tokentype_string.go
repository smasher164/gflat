// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EOF-0]
	_ = x[LineTerminator-1]
	_ = x[Plus-2]
	_ = x[Minus-3]
	_ = x[Times-4]
	_ = x[Divide-5]
	_ = x[Remainder-6]
	_ = x[And-7]
	_ = x[Or-8]
	_ = x[Caret-9]
	_ = x[Tilde-10]
	_ = x[Backtick-11]
	_ = x[LessThan-12]
	_ = x[GreaterThan-13]
	_ = x[Equals-14]
	_ = x[Colon-15]
	_ = x[Not-16]
	_ = x[Comma-17]
	_ = x[Period-18]
	_ = x[Semicolon-19]
	_ = x[LeftParen-20]
	_ = x[RightParen-21]
	_ = x[LeftBrace-22]
	_ = x[RightBrace-23]
	_ = x[LeftBracket-24]
	_ = x[RightBracket-25]
	_ = x[DollarSign-26]
	_ = x[QuestionMark-27]
	_ = x[LogicalAnd-28]
	_ = x[LogicalOr-29]
	_ = x[LeftShift-30]
	_ = x[RightShift-31]
	_ = x[LogicalEquals-32]
	_ = x[FatArrow-33]
	_ = x[NotEquals-34]
	_ = x[LessThanEquals-35]
	_ = x[GreaterThanEquals-36]
	_ = x[ColonEquals-37]
	_ = x[Exponentiation-38]
	_ = x[DotDot-39]
	_ = x[LeftArrow-40]
	_ = x[RightArrow-41]
	_ = x[Fun-42]
	_ = x[Type-43]
	_ = x[Trait-44]
	_ = x[Import-45]
	_ = x[Let-46]
	_ = x[Var-47]
	_ = x[If-48]
	_ = x[Else-49]
	_ = x[Case-50]
	_ = x[Match-51]
	_ = x[Package-52]
	_ = x[Iso-53]
	_ = x[Ref-54]
	_ = x[Mut-55]
	_ = x[Pub-56]
	_ = x[Where-57]
	_ = x[Impl-58]
	_ = x[Ident-59]
	_ = x[Number-60]
	_ = x[TypeArg-61]
	_ = x[Whitespace-62]
	_ = x[SingleLineComment-63]
	_ = x[StringBeg-64]
	_ = x[StringPart-65]
	_ = x[StringEnd-66]
	_ = x[String-67]
	_ = x[Illegal-68]
}

const _TokenType_name = "EOFLineTerminatorPlusMinusTimesDivideRemainderAndOrCaretTildeBacktickLessThanGreaterThanEqualsColonNotCommaPeriodSemicolonLeftParenRightParenLeftBraceRightBraceLeftBracketRightBracketDollarSignQuestionMarkLogicalAndLogicalOrLeftShiftRightShiftLogicalEqualsFatArrowNotEqualsLessThanEqualsGreaterThanEqualsColonEqualsExponentiationDotDotLeftArrowRightArrowFunTypeTraitImportLetVarIfElseCaseMatchPackageIsoRefMutPubWhereImplIdentNumberTypeArgWhitespaceSingleLineCommentStringBegStringPartStringEndStringIllegal"

var _TokenType_index = [...]uint16{0, 3, 17, 21, 26, 31, 37, 46, 49, 51, 56, 61, 69, 77, 88, 94, 99, 102, 107, 113, 122, 131, 141, 150, 160, 171, 183, 193, 205, 215, 224, 233, 243, 256, 264, 273, 287, 304, 315, 329, 335, 344, 354, 357, 361, 366, 372, 375, 378, 380, 384, 388, 393, 400, 403, 406, 409, 412, 417, 421, 426, 432, 439, 449, 466, 475, 485, 494, 500, 507}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
